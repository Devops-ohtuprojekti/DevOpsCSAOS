name: Deploy

on: [push]

jobs:
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

  build:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run backend tests
        working-directory: ./backend
        run: npm install && npm test
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: postgres
          DB_PASS: postgres
          DB_USER: postgres
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm install && npm test
      - name: Run backend lint
        working-directory: ./backend
        run: npm run lint
      - name: Run frontend lint
        working-directory: ./frontend
        run: npm run lint
      - name: Test image building
        run: docker build . -t image-test-build

  deploy_to_staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.8.9
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: 'ohtu-csaos-staging'
          heroku_email: ${{secrets.PROJECT_EMAIL}}
          usedocker: true
